name: artifact-image-matrix

on:
  #schedule:
  #  - cron: '0 1 * * *' # Scheduled runs every day at 1am UTC
  workflow_dispatch:
  #workflow_call:


jobs:
  
  matrix_prep:
    if: ${{ github.repository_owner == 'rpardini' }}
    runs-on: "ubuntu-latest" # "macos-latest" # is mac faster? not really. 
    env:
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
    steps:
      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Restore cached
        uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: |
            cache/memoize
            cache/oci/positive
          key: ${{ runner.os }}-matrix-cache

      #- name: Prepare MacOS Machine
      #  id: prepare-machine-macos
      #  run: |
      #    brew install bash coreutils git docker
      #    colima start

      - name: Prepare Info JSON and Matrices
        id: prepare-matrix
        run: |
          # this sets outputs "artifact-matrix" #and "image-matrix" 
          bash ./compile.sh json-info-boards DEBUG=yes

      - name: chown cache back
        run: |
          sudo chown -R $USER:$USER cache

      - name: Save cache
        uses: actions/cache/save@v3
        with:
          path: |
            cache/memoize
            cache/oci/positive
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}

      - name: echo stuff artifact
        run: |
          echo '${{ steps.prepare-matrix.outputs.artifact-matrix }}' | jq .

      - name: echo stuff image
        run: |
          echo '${{ steps.prepare-matrix.outputs.image-matrix }}' | jq .

      - name: Prepare GH Release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest-images"
          prerelease: false
          title: "Latest images"
    
    outputs:
      artifact: ${{ steps.prepare-matrix.outputs.artifact-matrix }}
      image: ${{ steps.prepare-matrix.outputs.image-matrix }}

  build-artifacts:
    if: ${{ github.repository_owner == 'rpardini' }}
    needs: [ "matrix_prep" ]
    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifact) }}
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}

    env:
      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date

    steps:
      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}    # GitHub actions builtin token. repo has to have pkg access.

      - name: Checkout build repo
        uses: actions/checkout@v3 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          fetch-depth: 1
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: Build  ${{matrix.desc}}
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} SHARE_LOG=yes

  build-images:
    needs: [ "matrix_prep", "build-artifacts" ]
    timeout-minutes: 15
    if: ${{ github.repository_owner == 'rpardini' }}

    strategy:
      fail-fast: false # let other jobs try to complete if one fails
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.image) }}
    name: ${{ matrix.desc }}
    runs-on: ${{ matrix.runs_on }}
    env:
      EXTRA: "'DONT_BUILD_ARTIFACTS=kernel,firmware,full_firmware,rootfs,fake_ubuntu_advantage_tools,armbian-config,armbian-zsh,armbian-plymouth-theme' COMPRESS_OUTPUTIMAGE=xz SHOW_DEBIAN=yes SHARE_LOG=yes "

      OCI_TARGET_BASE: "ghcr.io/${{ github.repository }}/" # This is picked up by the Docker launcher automatically
      DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX: "ghcr.io/${{ github.repository }}:armbian-next-" # Use Docker image in same repo
      DOCKER_SKIP_UPDATE: "yes" # Do not apt update/install/requirements/etc during Dockerfile build, trust DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX's images are up-to-date
    steps:

      - name: Checkout build repo
        uses: actions/checkout@v3
        if: ${{matrix.really == 'yes'}}
        with:
          repository: ${{ github.repository_owner }}/armbian-build
          ref: extensions
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      - name: ${{matrix.desc}}
        id: build-one-image
        if: ${{matrix.really == 'yes'}}
        run: |
          bash ./compile.sh ${{ matrix.invocation }} "IMAGE_VERSION=20220400-${{ github.repository_owner }}" ${{env.EXTRA}}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        if: ${{matrix.really == 'yes'}}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: output/images/*.xz
          tag: latest-images # created in prepare above
          overwrite: true
          file_glob: true

      - name: Cleanup output images
        if: always() && ${{matrix.really == 'yes' }}
        run: |
          rm -rf output/images userpatches/VERSION
